---
title: "Demo"
format: 
    revealjs:
        css: demo.css
---

# Project Pipeline

```{mermaid}

graph LR;
    A[Web \nCrawling] --> B[Data \nPreprocessing];
    B --> C[Data \nSummarization];
    C --> D[Semantic Analysis\n& Embedding];
    D --> E[Search Engine \nDevelopment];
    E --> F[User \nInterface];
    F --> G[Evaluation \n& Feedback];
    G -->|Improves \nSystem| E;
    G --> H[Iterative \nImprovement];
    H -->|Refine Prompt \nand Summaries| C;

```

# Demo Pipeline

```{mermaid}

graph LR;
    A[Web \nCrawling] --> B[Data \nPreprocessing];
    B --> C[Data \nSummarization];
    C --> D[Semantic Analysis\n& Embedding];
    D --> E[Search Engine \nDevelopment];
    E --> F[User \nInterface];
```

# Web Crawling

```{python}
#| echo: true
import requests
from bs4 import BeautifulSoup

urls = ["https://www.charlotte.edu/","https://www.charlotte.edu/research","https://www.charlotte.edu/landing/campus-life"]
test_data = []

for url in urls:
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    title = soup.find('title')
    body_text = soup.find('body').get_text(strip=True, separator=' ')
    
    test_data.append({
        "url": url,
        "title": title.text,
        "body_text": body_text
    })
```

## Output

```{python}
#| echo: true
import pandas as pd

df = pd.DataFrame(test_data) 

df.head(3)
```

---

```{python}
#| echo: true
df.loc[0, 'body_text']
```

---

```{python}
#| echo: true
df.loc[1, 'body_text']
```

---

```{python}
#| echo: true
df.loc[2, 'body_text']
```

# Data Preprocessing

```{python}
#| echo: true
text_to_remove = ["Skip to main content Admissions & Financial Aid Academics Research Athletics Campus Life Diversity Alumni & Friends Faculty & Staff Prospective Students Community Current Students Parents & Family My UNC Charlotte Directory Make a Gift Library About Us Apply Now Visit Our Campus Give to UNC Charlotte Take a Virtual Tour Corporate Engagement ",
                  "Click For More Less toggle footer Campus Links Alerts Jobs Make a Gift Maps / Directions Accessibility Resources Alumni & Friends Faculty & Staff Prospective Students Community Current Students Parents and Family Stay In Touch facebook instagram flickr linkedin twitter youtube maps The University of North Carolina at Charlotte 9201 University City Blvd, Charlotte, NC 28223-0001 704-687-8622 Â© 2024 UNC Charlotte | All Rights Reserved Contact Us | Terms of Use | University Policies Report a Concern"]

for text in text_to_remove:
    df['body_text'] = df['body_text'].str.replace(text, '')

df.head()
```

# Data Summarization
## LLM Model Setup

```{python}
#| echo: true
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

tokenizer = AutoTokenizer.from_pretrained("google/gemma-2b-it")
model = AutoModelForCausalLM.from_pretrained("google/gemma-2b-it", device_map="cuda:0", torch_dtype=torch.bfloat16)

PROMPT = (
    "Given the url: {url}, and title: {title}, "
    "Describe the content of the webpage in 3 sentences: {body_text} ```"
)

def extract_summary(text):
    parts = text.split("```")
    if len(parts) > 1:
        return parts[1].strip().replace("<eos>", "")
    else:
        return None

def generate_summary(row):
    prompt = f"{PROMPT.format(url=row['url'], title=row['title'], body_text=row['body_text'])}"
    input_ids = tokenizer(prompt, return_tensors="pt").to("cuda:0")
    
    output = model.generate(**input_ids, max_new_tokens=200)
    return extract_summary(tokenizer.decode(output[0]))

```

## Generating Summaries

```{python}
#| echo: true
df['summary'] = df.apply(generate_summary, axis=1)

df['summary']
```


---

```{python}
#| echo: true
print(df['summary'][0])
```

```{python}
import gc
torch.cuda.empty_cache()
gc.collect()
```

## Semantic Analysis & Embedding

```{python}
#| echo: true
from sentence_transformers import SentenceTransformer, util
import torch

model = SentenceTransformer('msmarco-distilbert-base-v3')
embeddings = model.encode(df["summary"], convert_to_tensor=True)

def search(query, top_k):
    query_embedding = model.encode(query, convert_to_tensor=True)
    cos_scores = util.pytorch_cos_sim(query_embedding, embeddings)[0]
    cos_scores = cos_scores.cpu()

    top_results = torch.topk(cos_scores, k=top_k)

    results = []
    for idx, score in zip(top_results[1], top_results[0]):
        result_dict = {
            'url': df['url'][idx.item()],
            'score': score.item(),
            'title': df['title'][idx.item()],
            'summary': df['summary'][idx.item()],
        }
        results.append(result_dict)

    return results
```

---

```{python}
#| echo: true
print(search('research', 1))
print(search('campus life', 2))
print(search('home page', 3))
```

## Search Engine 

```{python}
#| echo: true
from fastapi import FastAPI

app = FastAPI()

@app.get("/search")
def search_api(query: str, top_k: int):
    return search(query, top_k)
```

---

```{python}
#| echo: true
import requests

response = requests.get("http://localhost:8000/search?query=research&top_k=1")
print(response.json())
```

## User Interface

```{ojs}
//| echo: true
//| eval: false
import {html} from 'd3';
import {Inputs} from '@jashkenas/inputs';

viewof query = Inputs.text({label: "Query", placeholder: "Enter your search query", value: ""})

viewof top_k = Inputs.range([1, 3],
{
  label: "Top K Results:", 
  min: 1, 
  max: 3, 
  step: 1, 
  value: 1
});

async function search(query, top_k) {
  const response = await fetch(`http://localhost:8000/search?query=${query}&top_k=${top_k}`);
  console.log(response);
  return response.json();
}

function displayResults(results) {
  return html`
    <div>
        ${results.map(result => html`
            <p><strong>URL:</strong> ${result.url}</p>
            <p><strong>Score:</strong> ${result.score}</p>
            <p><strong>Title:</strong> ${result.title}</p>
            <p><strong>Summary:</strong> ${result.summary}</p>
            <hr>
        `)}
    </div>
  `;
}

viewof searchResults = search(query, top_k)
  .then(results => displayResults(results));
```

---

## User Interface

```{ojs}
import {html} from 'd3';
import {Inputs} from '@jashkenas/inputs';

viewof query = Inputs.text({label: "Query", placeholder: "Enter your search query", value: ""})

viewof top_k = Inputs.range([1, 3],
{
  label: "# of Results:", 
  min: 1, 
  max: 3, 
  step: 1, 
  value: 1
});

async function search(query, top_k) {
  const response = await fetch(`http://localhost:8000/search?query=${query}&top_k=${top_k}`);
  console.log(response);
  return response.json();
}

function displayResults(results) {
  return html`
    <div>
        <small>
        ${results.map(result => html`
            <p><strong>URL:</strong> ${result.url}</p>
            <p><strong>Score:</strong> ${result.score}</p>
            <p><strong>Title:</strong> ${result.title}</p>
            <p><strong>Summary:</strong> ${result.summary}</p>
            <hr>
        `)}
      </small>
    </div>
  `;
}

viewof searchResults = search(query, top_k)
  .then(results => displayResults(results));
```